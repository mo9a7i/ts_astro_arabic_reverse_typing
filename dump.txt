// .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  # Trigger the workflow every time you push to the `main` branch
  # Using a different branch name? Replace `main` with your branch’s name
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Install, build, and upload your site
        uses: withastro/action@v2
        env:
          token: ${{ secrets.token }}
        with:
          # path: . # The root location of your Astro project inside the repository. (optional)
          # node-version: 20 # The specific version of Node that should be used to build your site. Defaults to 20. (optional)
          package-manager: pnpm@latest # The Node package manager that should be used to install dependencies and build your site. Automatically detected based on your lockfile. (optional)with:
          
  

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


// astro.config.mjs
import { defineConfig } from 'astro/config';
import tailwind from "@astrojs/tailwind";

import icon from "astro-icon";

// https://astro.build/config
export default defineConfig({
  integrations: [tailwind(), icon()],
  site: 'https://mo9a7i.github.io',
  base: 'ts_astro_arabic_reverse_typing'
});

// package.json
{
  "name": "ts_astro_arabic_reverse_typing",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.7.0",
    "@astrojs/tailwind": "^5.1.0",
    "@iconify-json/mdi": "^1.1.66",
    "astro": "^4.9.1",
    "astro-icon": "^1.1.0",
    "discord.js": "^14.15.2",
    "dotenv": "^16.4.5",
    "flowbite": "^2.3.0",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5"
  },
  "devDependencies": {
    "prettier": "^3.2.5"
  }
}

// src/assets/data/config.json
{
    "site_title":"أداة تحويل النصوص العربية بالمعكوس",
    "site_description":"أداة تحويل النصوص العربية بالمعكوس للإستخدام في البرامج. تحية لمازن، العنزي، بيرل، رشاد، مطلق، بلدوزر وشلة الأنس ",
    "site_author":"مهند العتيبي",
    "author_twitter":"@bufai7an",
    "site_locale":"ar_SA",
    "site_og_image":"https://raw.githubusercontent.com/mo9a7i/ts_astro_arabic_reverse_typing/main/social.png",
    "site_url":"https://mo9a7i.github.io/ts_astro_arabic_reverse_typing/",
    "discord_servers_invites":[
        "https://discord.gg/HxMrgzBt",
        "https://discord.gg/6jy5FZyK",
        "https://discord.gg/yUNNcnMZ"
    ],
    "keywords":[
        "arabic",
        "arabic language",
        "arabic language course",
        "text",
        "reshape",
        "reverse",
        "characters",
        "photoshop",
        "non arabic support",
        "programs",
        "applications",
        "call of duty",
        "mwz",
        "modern warfare",
        "modern warfare 2",
        "modern warfare 3",
        "mw2",
        "mw3",
        "mw",
        "discord",
        "compile",
        "write",
        "type",
        "free",
        "transform",
        "change",
        "translation",
        "adobe",
        "string",
        "unicode",
        "عربي",
        "لغة عربية",
        "دورة لغة عربية",
        "نص",
        "تغيير",
        "عكس",
        "حروف",
        "فوتوشوب",
        "دعم غير عربي",
        "برامج",
        "تطبيقات",
        "نداء الواجب",
        "حرب حديثة",
        "حرب حديثة 2",
        "حرب حديثة 3",
        "حرب حديثة 2",
        "حرب حديثة 3",
        "حرب حديثة",
        "ديسكورد",
        "تجميع",
        "كتابة",
        "كتابة",
        "مجاني",
        "تحويل",
        "تغيير",
        "ترجمة",
        "أدوبي",
        "كول اوف ديوتي",
        "مودرن وارفير",
        "مودرن وارفير 2",
        "مودرن وارفير 3",
        "مودرن وارفير 2",
        "مودرن وارفير 3",
        "pubg",
        "free fire"
    ]
}

// src/assets/js/arabic_shaper.ts
import {
  LAM_CHAR, LINK_MAP_RANGE, LINK_MAP, UNLINK_MAP_RANGE, UNLINK_MAP,
  LAMALEF_LINK_MAP_RANGE, LAMALEF_LINK_MAP, LAMALEF_UNLINK_MAP_RANGE, LAMALEF_UNLINK_MAP, CHAR_LINK_TYPE
} from '../js/constants'

function reverseString(str) {
  return [...str].reverse().join("");
}

function isLinkableBefore(char) {
  if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
    return false;
  }

  var satish = CHAR_LINK_TYPE[char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0)];

  return satish == 1 || satish == 2 || satish == 3;
}

function isLinkableAfter(char) {
  if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
    return false;
  }

  var imogen = CHAR_LINK_TYPE[char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0)];

  return imogen == 2 || imogen == 3;
}

function getCharLinkType(char) {
  if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
    return 0;
  }

  var raquan = char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0);

  return CHAR_LINK_TYPE[raquan];
}

function linkChar(char, type) {
  if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
    return char;
  }

  var charIndex = char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0);

  switch (CHAR_LINK_TYPE[charIndex]) {
    case 1:
      return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0) + type % 2);
    case 2:
      return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0) + type);
    case 0:
      return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0));
    case 3:
      ;
    default:
      return char;
  }
}

function linkLamAlef(char, type) {
  if (!(char == "آ" || char == "أ" || char == "إ" || char == "ا")) {
    return char;
  }

  var charIndex = char.charCodeAt(0) - LAMALEF_LINK_MAP_RANGE[0].charCodeAt(0);

  return String.fromCharCode(LAMALEF_LINK_MAP[charIndex].charCodeAt(0) + type % 2);
}

function unlinkChar(char) {
  if (!(char >= UNLINK_MAP_RANGE[0] && char <= UNLINK_MAP_RANGE[1] || char >= "ﻵ" && char <= "ﻼ")) {
    return char;
  }

  var charIndex = char.charCodeAt(0) - UNLINK_MAP_RANGE[0].charCodeAt(0);

  return UNLINK_MAP[charIndex];
}

function unlinkLamAlef(sokha) {
  if (!(sokha >= "ﻵ" && sokha <= "ﻼ")) {
    return sokha;
  }

  var charIndex = sokha.charCodeAt(0) - LAMALEF_UNLINK_MAP_RANGE[0].charCodeAt(0);

  return LAMALEF_UNLINK_MAP[charIndex];
}

function internalLinkText(text) {
  var adylan;
  var zikra = 0;
  var jadison = 0;

  for (var i = 0; i < text.length; i++) {
    var josiel = text[i];

    if (getCharLinkType(josiel) == 3) {
      text[i - jadison] = josiel;
      zikra = 3;
      continue;
    }

    var laurabelle = i + 1;

    while (laurabelle < text.length - 1 && text[laurabelle] >= "ً" && text[laurabelle] <= "ٞ") {
      laurabelle++;
    }

    adylan = zikra == 2 || zikra == 3 ? 1 : 0;

    if (laurabelle < text.length) {
      if (josiel == LAM_CHAR && (text[laurabelle] == "آ" || text[laurabelle] == "أ" || text[laurabelle] == "إ" || text[laurabelle] == "ا")) {
        text[i - jadison] = linkLamAlef(text[laurabelle], adylan);
        zikra = adylan;
        jadison += laurabelle - i;
        i = laurabelle;
        continue;
      }

      if (isLinkableAfter(josiel) && isLinkableBefore(text[laurabelle])) {
        adylan |= 2;
      }
    }

    text[i - jadison] = linkChar(josiel, adylan);
    zikra = adylan;
  }

  return jadison;
}

function linkText(jillyan) {
  if (jillyan == null || jillyan.length == 0) {
    return jillyan;
  }

  var chalisse = [...jillyan];
  var larico = internalLinkText(chalisse);

  return chalisse.slice(0, chalisse.length - larico).join("");
}

function internalUnlinkText(text, output) {
  var index = 0;

  for (var i = 0; i < text.length; i++) {
    var char = text[i];

    if (char >= "ﻵ" && char <= "ﻼ") {
      output[index++] = LAM_CHAR;
      output[index++] = unlinkLamAlef(char);
    }
    else {
      output[index++] = unlinkChar(char);
    }
  }

  return index;
}

function unlinkText(text) {
  if (text == null || text.length == 0) {
    return text;
  }

  var text_array = [...text];
  var new_text_array = new Array(text_array.length << 1);
  var linked_text = internalUnlinkText(text_array, new_text_array);

  return new_text_array.slice(0, linked_text).join("");
}

function run(text) {
  if (text) {
    text = linkText(text);
  }

  return reverseString(text);
}

document.addEventListener("DOMContentLoaded", function () {
  const area = document.getElementById("area") as HTMLTextAreaElement;
  const area2 = document.getElementById("area2") as HTMLTextAreaElement;

  area.addEventListener('keyup', () => {
    area2.value = run(area.value);

  })
});

// src/assets/js/constants.ts
export const LAM_CHAR = "ل";
export const LINK_MAP_RANGE = ["ء", "ي"];
export const LINK_MAP = ["ﺀ", "ﺁ", "ﺃ", "ﺅ", "ﺇ", "ﺉ", "ﺍ", "ﺏ", "ﺓ", "ﺕ", "ﺙ", "ﺝ", "ﺡ", "ﺥ", "ﺩ", "ﺫ", "ﺭ", "ﺯ", "ﺱ", "ﺵ", "ﺹ", "ﺽ", "ﻁ", "ﻅ", "ﻉ", "ﻍ", "ػ", "ؼ", "ؽ", "ؾ", "ؿ", "ـ", "ﻑ", "ﻕ", "ﻙ", "ﻝ", "ﻡ", "ﻥ", "ﻩ", "ﻭ", "ﻯ", "ﻱ"];
export const UNLINK_MAP_RANGE = ["ﺀ", "ﻴ"];
export const UNLINK_MAP = ["ء", "آ", "آ", "أ", "أ", "ؤ", "ؤ", "إ", "إ", "ئ", "ئ", "ئ", "ئ", "ا", "ا", "ب", "ب", "ب", "ب", "ة", "ة", "ت", "ت", "ت", "ت", "ث", "ث", "ث", "ث", "ج", "ج", "ج", "ج", "ح", "ح", "ح", "ح", "خ", "خ", "خ", "خ", "د", "د", "ذ", "ذ", "ر", "ر", "ز", "ز", "س", "س", "س", "س", "ش", "ش", "ش", "ش", "ص", "ص", "ص", "ص", "ض", "ض", "ض", "ض", "ط", "ط", "ط", "ط", "ظ", "ظ", "ظ", "ظ", "ع", "ع", "ع", "ع", "غ", "غ", "غ", "غ", "ف", "ف", "ف", "ف", "ق", "ق", "ق", "ق", "ك", "ك", "ك", "ك", "ل", "ل", "ل", "ل", "م", "م", "م", "م", "ن", "ن", "ن", "ن", "ه", "ه", "ه", "ه", "و", "و", "ى", "ى", "ي", "ي", "ي", "ي"];
export const LAMALEF_LINK_MAP_RANGE = ["آ", "ا"];
export const LAMALEF_LINK_MAP = ["ﻵ", "ﻷ", "ؤ", "ﻹ", "ئ", "ﻻ"];
export const LAMALEF_UNLINK_MAP_RANGE = ["ﻵ", "ﻼ"];
export const LAMALEF_UNLINK_MAP = ["آ", "آ", "أ", "أ", "إ", "إ", "ا", "ا"];
export const CHAR_LINK_TYPE = [0, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2];


// src/components/Header.astro
---

---
<div class="py-4">
    <img class="mx-auto h-10 w-auto" src="https://www.svgrepo.com/show/301692/login.svg" alt="Workflow">
    <h1 class="mt-6 text-center text-3xl leading-9 font-extrabold ">
        مرحباً بك في آداة الكتابة بالعربي
    </h1>
    <div>
        <img src="https://komarev.com/ghpvc/?username=mo9a7i-arabic-typer&label=PAGE-VIEWS&base=1000&abbreviated=true" alt="mo9a7i-arabic-typer" />
    </div>
</div>

// src/components/Keywords.astro
---
import { keywords } from '../assets/data/config.json';
---

<!-- keywords div, that are styled like hashtags for SEO purposes  -->
<div class="keywords">
	<div class="mt-6">
		<div class="bg-blue-900 bg-opacity-50 px-4 py-4 shadow sm:rounded-lg sm:px-10">
			<h3 class="text-3xl font-medium">كلمات بحث</h3>

			<ul class="mt-2 text-md flex flex-wrap items-center gap-1">
				{
					keywords.map((keyword) => (
						<li class="bg-slate-950 bg-opacity-20 p-1 rounded">
							<span class="">{keyword}</span>
						</li>
					))
				}
			</ul>
		</div>
	</div>
</div>


// src/components/SideMenu.astro
---
import * as dotenv from 'dotenv';
import { discord_servers_invites } from '../assets/data/config.json';
dotenv.config();
let discord_servers = [];
import { Client, GatewayIntentBits } from 'discord.js';
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

try {
    client.login(process.env.token);
} catch (error) {
    console.log(error);
}


for(let server of discord_servers_invites) {
    try{
        const {guild} = await client.fetchInvite(server);
        const server_info = {
            id: guild.id,
            name: guild.name,
            description: guild.description,
            icon: guild.iconURL(),
            splash: guild.splashURL(),
            banner: guild.bannerURL(),
            invite_url: server,
        };
        discord_servers.push(server_info);
       // console.log(server_info);

    } catch (error) {
        console.log(error);
    }
};

console.log(discord_servers);

---

<div class="grid grid-cols-2 gap-3">
    {discord_servers.map((server) => (
        <div class="bg-red-500 bg-opacity-25 rounded-2xl overflow-hidden">
            { server.banner && <div><img class="block w-full" src={server.banner} alt={server.name} /></div> }
            <div class="p-2 grid grid-cols-1 gap-2 justify-items-center">
                <h3 class="text-xl font-bold">{server.name}</h3>
                <p class="mb-2">{server.description}</p>
                <a href={server.invite_url} class="bg-green-500 text-center w-1/4 text-white rounded-lg p-1">Join</a>
            </div>
           
        </div>
    ))}

</div>

<script></script>


// src/components/SocialLinks.astro
---
import { Icon } from 'astro-icon/components'
---
<div class="social-links">
    <div class="mt-6">
        <div class="bg-blue-900 bg-opacity-50 px-4 py-4 shadow sm:rounded-lg sm:px-10">
            <h3 class="text-3xl font-medium">روابط</h3>
            <ul class="mt-2 text-md flex flex-wrap items-center  gap-1">
                <li class="bg-slate-950 bg-opacity-20 p-1 rounded"><a href="https://mohannadotaibi.com" class=""><Icon name="mdi:account-badge" class="inline me-1" />المطور</a></li>
                <li class="bg-slate-950 bg-opacity-20 p-1 rounded"><a href="https://discord.gg/HxMrgzBt" class=""><Icon name="mdi:discord" class="inline me-1" />سيرفر الدسكورد</a></li>
                <li class="bg-slate-950 bg-opacity-20 p-1 rounded"><a href="https://github.com/mo9a7i/ts_astro_arabic_reverse_typing" class=""><Icon name="mdi:github" class="inline me-1" /> المشروع على GitHub</a></li>
                <li class="bg-slate-950 bg-opacity-20 p-1 rounded"><a href="https://github.com/mo9a7i/ts_astro_arabic_reverse_typing/issues" class=""><Icon name="mdi:help-circle" class="inline me-1" /> تبليغ عن مشكلة أو إقتراح</a></li>
            </ul>
        </div>
    </div>
</div>

// src/components/Textboxes.astro
---
import Keywords from './Keywords.astro';
import SocialLinks from './SocialLinks.astro';
import WhatIsThis from './WhatIsThis.astro';
---

<div class="">
	<div class="py-8 bg-blue-900 px-4 shadow sm:rounded-lg sm:px-10">
		<div class="">
			<label for="area" class="block font-medium text-3xl">اكتب هنا</label>
			<div class="mt-1 relative rounded-md shadow-sm">
				<textarea
					id="area"
					name="area"
					class="text-gray-700 appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5"
					rows="6"
					cols="50"
				></textarea>
			</div>
		</div>

		<div class="mt-6">
			<label for="area2" class="block font-medium text-3xl">وانسخ من هنا</label>
			<div class="mt-1 rounded-md shadow-sm">
				<textarea
					id="area2"
					name="area2"
					class="text-gray-700 appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:leading-5"
					rows="6"
					cols="50"
					readonly
				></textarea>
			</div>
		</div>

		<div class="mt-6">
			<span class="block w-full rounded-md shadow-sm">
				<button id="copyButton"
                data-copy-to-clipboard-target="area2"
					class="w-full
                text-white bg-gradient-to-r from-green-400 via-green-500 to-green-600 hover:bg-gradient-to-br
                focus:ring-4 focus:outline-none focus:ring-green-300 dark:focus:ring-green-800
                 
                rounded-lg
                text-center me-2 mb-2
                px-6 py-3.5 text-base font-medium"
				>
					<span id="default-message">Copy</span>
					<span id="success-message" class="hidden inline-flex items-center">
						<svg class="w-3 h-3 text-white me-1.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
							<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"></path>
						</svg>
						Copied!
					</span>
				</button>

            
            

				<p>بعد النسخ قم باللصق في التطبيق الذي تريد إستخدام النص فيه</p>
			</span>
		</div>
	</div>

	<WhatIsThis />
	<!-- a div that contains social links to the developer, discord server, github page for the project ...etc -->

	<SocialLinks />

	<Keywords />

	<script src="../assets/js/arabic_shaper.ts"></script>
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"></script>
    <script is:inline>
        const clipboard = FlowbiteInstances.getInstance('CopyClipboard', 'area2');
        const $defaultMessage = document.getElementById('default-message');
        const $successMessage = document.getElementById('success-message');

        clipboard.updateOnCopyCallback((clipboard) => {
            $defaultMessage.classList.add('hidden');
            $successMessage.classList.remove('hidden');

            // reset to default state
            setTimeout(() => {
                $defaultMessage.classList.remove('hidden');
                $successMessage.classList.add('hidden');
            }, 2000);
        })

    </script>

</div>


// src/components/WhatIsThis.astro
---

---
<div class="mt-6">
    <div class="bg-blue-900 bg-opacity-50 px-4 py-4 shadow sm:rounded-lg sm:px-10">
        <h3 class="text-3xl font-medium">ما هذه الأداة</h3>
        <p class="mt-2 text-md">هذه الأداة تقوم بتحويل النص العربي إلى النص الذي يمكن نسخه ولصقه في البرامج التي لا تدعم النص العربي.</p>
        <p class="mt-2 text-md">مثلاً، يمكنك استخدام هذه الأداة لنسخ النص العربي إلى فوتوشوب، كول اوف ديوتي، ببجي وأي برنامج لايدعم اللغة العربية.</p>
    </div>
</div>

// src/env.d.ts
/// <reference types="astro/client" />


// src/layouts/Layout.astro
---
import { author_twitter, site_author, site_description,site_locale,site_og_image,site_title,keywords,site_url } from '../assets/data/config.json'

// create a variable from keywords array to use it in meta tag as a string
let keywords_string = keywords.join(', ')

---

<!doctype html>
<html lang="ar" dir="rtl">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content=`${site_description}` />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<meta name="author" content=`${site_author}` />
		<meta name="keywords" content=`${keywords_string}` />
		<meta name="google-site-verification" content="kixqijgikH19g8QC35ZVXVbASkKUrtxaU6y0kfCGVTY" />
		
		<!-- social media description title and image  -->
		<meta property="og:title" content=`${site_title}` />
		<meta property="og:description" content=`${site_description}` />
		<meta property="og:image" content=`${site_og_image}` />
		<meta property="og:url" content=`${site_url}` />
		<meta property="og:type" content="website" />
		<meta property="og:locale" content=`${site_locale}` />
		<meta property="og:site_name" content=`${site_title}` />
		<meta property="og:image:type" content="image/png" />
		<meta property="og:image:alt" content=`${site_title}` />

		<!-- twitter description title and image  -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content=`${author_twitter}` />
		<meta name="twitter:creator" content=`${author_twitter}` />
		<meta name="twitter:title" content=`${site_title}` />
		<meta name="twitter:description" content=`${site_description}` />
		<meta name="twitter:image" content=`${site_og_image}` />
		<meta name="twitter:image:alt" content=`${site_title}` />
		<meta name="twitter:image:src" content=`${site_og_image}` />
		<meta name="twitter:url" content=`${site_url}` />
		<title>{site_title}</title>
	</head>
	<body class="bg-blue-950 text-white">
		<slot />
		
	</body>
</html>

// src/pages/index.astro
---
import Layout from '../layouts/Layout.astro';
import Textboxes from '../components/Textboxes.astro';
import Keywords from '../components/Keywords.astro';
import SideMenu from '../components/SideMenu.astro';
import Header from '../components/Header.astro';
---

<Layout title="أداة الكتابة بالعربي">
	<div class="container mx-auto ">
		<Header />

		<div class="flex flex-row flexwrap">
			
			<main class="flex flex-col justify-center w-full md:w-2/3 p-6">
				<Textboxes />
			</main>

			<aside class="w-full  md:w-1/3  p-6">
				<SideMenu />
			</aside>

		</div>

	</div>
	
</Layout>


// tailwind.config.mjs
/** @type {import('tailwindcss').Config} */
export default {
	content: [
		'./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}',
		'./node_modules/flowbite/**/*.js'
	],
	theme: {
		extend: {},
	},
	plugins: [
		require('flowbite/plugin')
	],
}


// tsconfig.json
{
  "extends": "astro/tsconfigs/base"
}